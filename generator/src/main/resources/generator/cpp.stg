wrapperClass(libraryName, wrappedClasses) ::= <<
<imports()>

<wrappedClasses:entity(); separator="\n\n">
<processing(wrappedClasses)>
>>

imports() ::= <<
#include \<utility>
#include \<unordered_map>
#include "exchange.pb.h"

#include \<z3.h>
#include "handlers.h"
>>

function(methodObject) ::= <<
void librarylink_<methodObject.name>(const exchange::MethodCallRequest& request, std::unordered_map\<std::string, void *>& persistence) {
    <methodObject.args:arg(); separator="\n">
    <if(methodObject.returnValue)><methodObject.returnValue> return_value = <endif><methodObject.name>(<argList(methodObject.args)>);
    <if(methodObject.returnValue)>
    <methodObject.returnValue>* ptr = new <methodObject.returnValue>;
    *ptr = std::move(return_value);
    persistence[request.assignedid()] = ptr;
    <endif>
}
>>

arg(argObject) ::= <<
<if(argObject.self)>
<argObject.type>* <argObject.name> = (<argObject.type>*) persistence[request.objectid()];
<elseif(argObject.reference)>
<argObject.type>* <argObject.name> = (<argObject.type>*) persistence[request.arg(<argObject.index>).string_value()];
<else>
<argObject.type> <argObject.name> = request.arg(<argObject.index>).int_value();
<endif>
>>

argList(args) ::= <<
<args:{x | <argUsage(x)>}; separator=", ">
>>

argUsage(arg) ::= <<
<if(arg.reference)>*<arg.name><else><arg.name><endif>
>>

entity(wrappedClass) ::= <<
<wrappedClass.methods:function(); separator="\n\n">
<wrappedClass.constructor:function(); separator="\n\n">
>>

processing(wrappedClasses) ::= <<
exchange::ChannelResponse process_request(const exchange::MethodCallRequest& request,
                                          std::unordered_map\<std::string, void *>& persistence) {
    <wrappedClasses:processingClass(); separator="\n">
    return exchange::ChannelResponse();
}
>>

processingClass(wrappedClass) ::= <<
<wrappedClass.methods:processEntry(); separator="\n">
<wrappedClass.constructor:processEntry(); separator="\n">
>>

processEntry(methodObject) ::= <<
if (request.methodname() == "<methodObject.name>") {
    librarylink_<methodObject.name>(request, persistence);
}
>>