// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exchange.proto

package exchange

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MethodCallRequest_ArgumentType int32

const (
	MethodCallRequest_PERSISTENCE MethodCallRequest_ArgumentType = 0
	MethodCallRequest_INPLACE     MethodCallRequest_ArgumentType = 1
)

var MethodCallRequest_ArgumentType_name = map[int32]string{
	0: "PERSISTENCE",
	1: "INPLACE",
}

var MethodCallRequest_ArgumentType_value = map[string]int32{
	"PERSISTENCE": 0,
	"INPLACE":     1,
}

func (x MethodCallRequest_ArgumentType) String() string {
	return proto.EnumName(MethodCallRequest_ArgumentType_name, int32(x))
}

func (MethodCallRequest_ArgumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0, 0}
}

type MethodCallRequest struct {
	MethodName           string                        `protobuf:"bytes,1,opt,name=methodName,proto3" json:"methodName,omitempty"`
	ObjectID             string                        `protobuf:"bytes,2,opt,name=objectID,proto3" json:"objectID,omitempty"`
	Args                 []*MethodCallRequest_Argument `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Static               bool                          `protobuf:"varint,4,opt,name=static,proto3" json:"static,omitempty"`
	DoGetReturnValue     bool                          `protobuf:"varint,5,opt,name=doGetReturnValue,proto3" json:"doGetReturnValue,omitempty"`
	Property             bool                          `protobuf:"varint,6,opt,name=property,proto3" json:"property,omitempty"`
	AssignedID           string                        `protobuf:"bytes,7,opt,name=assignedID,proto3" json:"assignedID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MethodCallRequest) Reset()         { *m = MethodCallRequest{} }
func (m *MethodCallRequest) String() string { return proto.CompactTextString(m) }
func (*MethodCallRequest) ProtoMessage()    {}
func (*MethodCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0}
}
func (m *MethodCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MethodCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MethodCallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MethodCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodCallRequest.Merge(m, src)
}
func (m *MethodCallRequest) XXX_Size() int {
	return m.Size()
}
func (m *MethodCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MethodCallRequest proto.InternalMessageInfo

func (m *MethodCallRequest) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MethodCallRequest) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *MethodCallRequest) GetArgs() []*MethodCallRequest_Argument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MethodCallRequest) GetStatic() bool {
	if m != nil {
		return m.Static
	}
	return false
}

func (m *MethodCallRequest) GetDoGetReturnValue() bool {
	if m != nil {
		return m.DoGetReturnValue
	}
	return false
}

func (m *MethodCallRequest) GetProperty() bool {
	if m != nil {
		return m.Property
	}
	return false
}

func (m *MethodCallRequest) GetAssignedID() string {
	if m != nil {
		return m.AssignedID
	}
	return ""
}

type MethodCallRequest_Argument struct {
	Type MethodCallRequest_ArgumentType `protobuf:"varint,1,opt,name=type,proto3,enum=exchange.MethodCallRequest_ArgumentType" json:"type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*MethodCallRequest_Argument_StringValue
	//	*MethodCallRequest_Argument_IntValue
	Value                isMethodCallRequest_Argument_Value `protobuf_oneof:"value"`
	Key                  string                             `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *MethodCallRequest_Argument) Reset()         { *m = MethodCallRequest_Argument{} }
func (m *MethodCallRequest_Argument) String() string { return proto.CompactTextString(m) }
func (*MethodCallRequest_Argument) ProtoMessage()    {}
func (*MethodCallRequest_Argument) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0, 0}
}
func (m *MethodCallRequest_Argument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MethodCallRequest_Argument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MethodCallRequest_Argument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MethodCallRequest_Argument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodCallRequest_Argument.Merge(m, src)
}
func (m *MethodCallRequest_Argument) XXX_Size() int {
	return m.Size()
}
func (m *MethodCallRequest_Argument) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodCallRequest_Argument.DiscardUnknown(m)
}

var xxx_messageInfo_MethodCallRequest_Argument proto.InternalMessageInfo

type isMethodCallRequest_Argument_Value interface {
	isMethodCallRequest_Argument_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MethodCallRequest_Argument_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type MethodCallRequest_Argument_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

func (*MethodCallRequest_Argument_StringValue) isMethodCallRequest_Argument_Value() {}
func (*MethodCallRequest_Argument_IntValue) isMethodCallRequest_Argument_Value()    {}

func (m *MethodCallRequest_Argument) GetValue() isMethodCallRequest_Argument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MethodCallRequest_Argument) GetType() MethodCallRequest_ArgumentType {
	if m != nil {
		return m.Type
	}
	return MethodCallRequest_PERSISTENCE
}

func (m *MethodCallRequest_Argument) GetStringValue() string {
	if x, ok := m.GetValue().(*MethodCallRequest_Argument_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *MethodCallRequest_Argument) GetIntValue() int32 {
	if x, ok := m.GetValue().(*MethodCallRequest_Argument_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *MethodCallRequest_Argument) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MethodCallRequest_Argument) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MethodCallRequest_Argument_OneofMarshaler, _MethodCallRequest_Argument_OneofUnmarshaler, _MethodCallRequest_Argument_OneofSizer, []interface{}{
		(*MethodCallRequest_Argument_StringValue)(nil),
		(*MethodCallRequest_Argument_IntValue)(nil),
	}
}

func _MethodCallRequest_Argument_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MethodCallRequest_Argument)
	// value
	switch x := m.Value.(type) {
	case *MethodCallRequest_Argument_StringValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *MethodCallRequest_Argument_IntValue:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntValue))
	case nil:
	default:
		return fmt.Errorf("MethodCallRequest_Argument.Value has unexpected type %T", x)
	}
	return nil
}

func _MethodCallRequest_Argument_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MethodCallRequest_Argument)
	switch tag {
	case 2: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &MethodCallRequest_Argument_StringValue{x}
		return true, err
	case 3: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &MethodCallRequest_Argument_IntValue{int32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _MethodCallRequest_Argument_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MethodCallRequest_Argument)
	// value
	switch x := m.Value.(type) {
	case *MethodCallRequest_Argument_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *MethodCallRequest_Argument_IntValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImportRequest struct {
	ImportedName         string   `protobuf:"bytes,1,opt,name=importedName,proto3" json:"importedName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportRequest) Reset()         { *m = ImportRequest{} }
func (m *ImportRequest) String() string { return proto.CompactTextString(m) }
func (*ImportRequest) ProtoMessage()    {}
func (*ImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{1}
}
func (m *ImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportRequest.Merge(m, src)
}
func (m *ImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportRequest proto.InternalMessageInfo

func (m *ImportRequest) GetImportedName() string {
	if m != nil {
		return m.ImportedName
	}
	return ""
}

type ChannelResponse struct {
	// Types that are valid to be assigned to ReturnValue:
	//	*ChannelResponse_ReturnValueString
	//	*ChannelResponse_ReturnValueInt
	//	*ChannelResponse_ExceptionMessage
	//	*ChannelResponse_NoReturnValue
	ReturnValue          isChannelResponse_ReturnValue `protobuf_oneof:"return_value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ChannelResponse) Reset()         { *m = ChannelResponse{} }
func (m *ChannelResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelResponse) ProtoMessage()    {}
func (*ChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{2}
}
func (m *ChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelResponse.Merge(m, src)
}
func (m *ChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelResponse proto.InternalMessageInfo

type isChannelResponse_ReturnValue interface {
	isChannelResponse_ReturnValue()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChannelResponse_ReturnValueString struct {
	ReturnValueString string `protobuf:"bytes,1,opt,name=return_value_string,json=returnValueString,proto3,oneof"`
}
type ChannelResponse_ReturnValueInt struct {
	ReturnValueInt int32 `protobuf:"varint,2,opt,name=return_value_int,json=returnValueInt,proto3,oneof"`
}
type ChannelResponse_ExceptionMessage struct {
	ExceptionMessage string `protobuf:"bytes,3,opt,name=exception_message,json=exceptionMessage,proto3,oneof"`
}
type ChannelResponse_NoReturnValue struct {
	NoReturnValue bool `protobuf:"varint,4,opt,name=no_return_value,json=noReturnValue,proto3,oneof"`
}

func (*ChannelResponse_ReturnValueString) isChannelResponse_ReturnValue() {}
func (*ChannelResponse_ReturnValueInt) isChannelResponse_ReturnValue()    {}
func (*ChannelResponse_ExceptionMessage) isChannelResponse_ReturnValue()  {}
func (*ChannelResponse_NoReturnValue) isChannelResponse_ReturnValue()     {}

func (m *ChannelResponse) GetReturnValue() isChannelResponse_ReturnValue {
	if m != nil {
		return m.ReturnValue
	}
	return nil
}

func (m *ChannelResponse) GetReturnValueString() string {
	if x, ok := m.GetReturnValue().(*ChannelResponse_ReturnValueString); ok {
		return x.ReturnValueString
	}
	return ""
}

func (m *ChannelResponse) GetReturnValueInt() int32 {
	if x, ok := m.GetReturnValue().(*ChannelResponse_ReturnValueInt); ok {
		return x.ReturnValueInt
	}
	return 0
}

func (m *ChannelResponse) GetExceptionMessage() string {
	if x, ok := m.GetReturnValue().(*ChannelResponse_ExceptionMessage); ok {
		return x.ExceptionMessage
	}
	return ""
}

func (m *ChannelResponse) GetNoReturnValue() bool {
	if x, ok := m.GetReturnValue().(*ChannelResponse_NoReturnValue); ok {
		return x.NoReturnValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChannelResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChannelResponse_OneofMarshaler, _ChannelResponse_OneofUnmarshaler, _ChannelResponse_OneofSizer, []interface{}{
		(*ChannelResponse_ReturnValueString)(nil),
		(*ChannelResponse_ReturnValueInt)(nil),
		(*ChannelResponse_ExceptionMessage)(nil),
		(*ChannelResponse_NoReturnValue)(nil),
	}
}

func _ChannelResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChannelResponse)
	// return_value
	switch x := m.ReturnValue.(type) {
	case *ChannelResponse_ReturnValueString:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ReturnValueString)
	case *ChannelResponse_ReturnValueInt:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ReturnValueInt))
	case *ChannelResponse_ExceptionMessage:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ExceptionMessage)
	case *ChannelResponse_NoReturnValue:
		t := uint64(0)
		if x.NoReturnValue {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ChannelResponse.ReturnValue has unexpected type %T", x)
	}
	return nil
}

func _ChannelResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChannelResponse)
	switch tag {
	case 1: // return_value.return_value_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ReturnValue = &ChannelResponse_ReturnValueString{x}
		return true, err
	case 2: // return_value.return_value_int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ReturnValue = &ChannelResponse_ReturnValueInt{int32(x)}
		return true, err
	case 3: // return_value.exception_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ReturnValue = &ChannelResponse_ExceptionMessage{x}
		return true, err
	case 4: // return_value.no_return_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ReturnValue = &ChannelResponse_NoReturnValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ChannelResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChannelResponse)
	// return_value
	switch x := m.ReturnValue.(type) {
	case *ChannelResponse_ReturnValueString:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReturnValueString)))
		n += len(x.ReturnValueString)
	case *ChannelResponse_ReturnValueInt:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ReturnValueInt))
	case *ChannelResponse_ExceptionMessage:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ExceptionMessage)))
		n += len(x.ExceptionMessage)
	case *ChannelResponse_NoReturnValue:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("exchange.MethodCallRequest_ArgumentType", MethodCallRequest_ArgumentType_name, MethodCallRequest_ArgumentType_value)
	proto.RegisterType((*MethodCallRequest)(nil), "exchange.MethodCallRequest")
	proto.RegisterType((*MethodCallRequest_Argument)(nil), "exchange.MethodCallRequest.Argument")
	proto.RegisterType((*ImportRequest)(nil), "exchange.ImportRequest")
	proto.RegisterType((*ChannelResponse)(nil), "exchange.ChannelResponse")
}

func init() { proto.RegisterFile("exchange.proto", fileDescriptor_e0328a4f16f87ea1) }

var fileDescriptor_e0328a4f16f87ea1 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0xb5, 0x3f, 0x12, 0x30, 0x17, 0xc2, 0xcf, 0x7c, 0x52, 0x65, 0x21, 0x15, 0x21, 0xda, 0x85,
	0x55, 0xb5, 0x56, 0x95, 0x48, 0x55, 0x17, 0xdd, 0x04, 0x82, 0x8a, 0xa5, 0x06, 0x45, 0x43, 0xd4,
	0x2d, 0x32, 0x70, 0x65, 0x5c, 0xcc, 0x8c, 0x3b, 0x33, 0xae, 0xc2, 0x9b, 0xf4, 0x0d, 0xfa, 0x2a,
	0x5d, 0x76, 0xd9, 0x65, 0x4b, 0x5f, 0xa4, 0xf2, 0x0c, 0x10, 0x47, 0xd9, 0x74, 0xe7, 0x7b, 0xee,
	0xb9, 0x33, 0xf7, 0x9c, 0x33, 0x86, 0x06, 0xde, 0x2d, 0x56, 0x21, 0x8b, 0xd0, 0x4f, 0x05, 0x57,
	0x9c, 0x38, 0x87, 0xba, 0xff, 0xbb, 0x04, 0xed, 0x6b, 0x54, 0x2b, 0xbe, 0x1c, 0x86, 0x49, 0x42,
	0xf1, 0x73, 0x86, 0x52, 0x91, 0x2e, 0xc0, 0x46, 0x83, 0x93, 0x70, 0x83, 0xae, 0xdd, 0xb3, 0xbd,
	0x2a, 0x2d, 0x20, 0xa4, 0x03, 0x0e, 0x9f, 0x7f, 0xc2, 0x85, 0x0a, 0xae, 0xdc, 0xff, 0x74, 0xf7,
	0x58, 0x93, 0xb7, 0x70, 0x12, 0x8a, 0x48, 0xba, 0xa5, 0x5e, 0xc9, 0xab, 0x9d, 0x3f, 0xf7, 0x8f,
	0x57, 0x3f, 0xba, 0xc6, 0xbf, 0x14, 0x51, 0xb6, 0x41, 0xa6, 0xa8, 0x9e, 0x20, 0x4f, 0xa0, 0x2c,
	0x55, 0xa8, 0xe2, 0x85, 0x7b, 0xd2, 0xb3, 0x3d, 0x87, 0xee, 0x2b, 0xf2, 0x02, 0x5a, 0x4b, 0xfe,
	0x1e, 0x15, 0x45, 0x95, 0x09, 0xf6, 0x31, 0x4c, 0x32, 0x74, 0x4f, 0x35, 0xe3, 0x11, 0x9e, 0x6f,
	0x96, 0x0a, 0x9e, 0xa2, 0x50, 0x5b, 0xb7, 0xac, 0x39, 0xc7, 0x3a, 0x57, 0x15, 0x4a, 0x19, 0x47,
	0x0c, 0x97, 0xc1, 0x95, 0x5b, 0x31, 0xaa, 0xee, 0x91, 0xce, 0x37, 0x1b, 0x9c, 0xc3, 0x4a, 0xe4,
	0x1d, 0x9c, 0xa8, 0x6d, 0x6a, 0xc4, 0x37, 0xce, 0xbd, 0x7f, 0x91, 0x71, 0xbb, 0x4d, 0x91, 0xea,
	0x29, 0xf2, 0x0c, 0xea, 0x52, 0x89, 0x98, 0x45, 0xb3, 0x2f, 0x7a, 0x5d, 0x6d, 0xd2, 0xd8, 0xa2,
	0x35, 0x83, 0x9a, 0x5d, 0x9f, 0x42, 0x35, 0x66, 0x6a, 0xcf, 0x28, 0xf5, 0x6c, 0xef, 0x74, 0x6c,
	0x51, 0x27, 0x66, 0xca, 0xb4, 0x5b, 0x50, 0x5a, 0xe3, 0x56, 0x7b, 0x51, 0xa5, 0xf9, 0xe7, 0xa0,
	0x02, 0xa7, 0x9a, 0xdc, 0x7f, 0x09, 0xf5, 0xe2, 0xa5, 0xa4, 0x09, 0xb5, 0x9b, 0x11, 0x9d, 0x06,
	0xd3, 0xdb, 0xd1, 0x64, 0x38, 0x6a, 0x59, 0xa4, 0x06, 0x95, 0x60, 0x72, 0xf3, 0xe1, 0x72, 0x38,
	0x6a, 0xd9, 0xfd, 0x0b, 0x38, 0x0b, 0x36, 0x29, 0x17, 0xea, 0x10, 0x6f, 0x1f, 0xea, 0xb1, 0x06,
	0xb0, 0x18, 0xf0, 0x03, 0xac, 0xff, 0xd3, 0x86, 0xe6, 0x70, 0x15, 0x32, 0x86, 0x09, 0x45, 0x99,
	0x72, 0x26, 0x91, 0xbc, 0x86, 0xff, 0x85, 0xf6, 0xda, 0xec, 0x3c, 0x33, 0x62, 0xcc, 0xf8, 0xd8,
	0xa2, 0x6d, 0x71, 0x1f, 0xc4, 0x54, 0xb7, 0xf2, 0xe8, 0x1e, 0x4c, 0xc4, 0x4c, 0x69, 0x2f, 0x72,
	0xa5, 0x8d, 0x02, 0x3d, 0x60, 0x8a, 0xbc, 0x82, 0x36, 0xde, 0x2d, 0x30, 0x55, 0x31, 0x67, 0xb3,
	0x0d, 0x4a, 0x19, 0x46, 0xc6, 0x96, 0xfc, 0xec, 0xd6, 0xb1, 0x75, 0x6d, 0x3a, 0xc4, 0x83, 0x26,
	0xe3, 0xb3, 0xe2, 0xe9, 0xe6, 0xd9, 0x8c, 0x2d, 0x7a, 0xc6, 0x78, 0xe1, 0x4d, 0x0c, 0x1a, 0x50,
	0x2f, 0xd2, 0x06, 0x6f, 0xbe, 0xef, 0xba, 0xf6, 0x8f, 0x5d, 0xd7, 0xfe, 0xb5, 0xeb, 0xda, 0x5f,
	0xff, 0x74, 0x2d, 0xe8, 0x88, 0xcc, 0x97, 0xe9, 0x5c, 0xaa, 0xcc, 0x5f, 0xcb, 0x54, 0xf9, 0x49,
	0x3c, 0x17, 0xa1, 0xd8, 0x26, 0x31, 0x5b, 0x0f, 0x9c, 0xd1, 0x3e, 0xf9, 0x79, 0x59, 0xff, 0x3c,
	0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x30, 0x31, 0xa2, 0x80, 0x4e, 0x03, 0x00, 0x00,
}

func (m *MethodCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodCallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MethodName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExchange(dAtA, i, uint64(len(m.MethodName)))
		i += copy(dAtA[i:], m.MethodName)
	}
	if len(m.ObjectID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExchange(dAtA, i, uint64(len(m.ObjectID)))
		i += copy(dAtA[i:], m.ObjectID)
	}
	if len(m.Args) > 0 {
		for _, msg := range m.Args {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExchange(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Static {
		dAtA[i] = 0x20
		i++
		if m.Static {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DoGetReturnValue {
		dAtA[i] = 0x28
		i++
		if m.DoGetReturnValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Property {
		dAtA[i] = 0x30
		i++
		if m.Property {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AssignedID) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExchange(dAtA, i, uint64(len(m.AssignedID)))
		i += copy(dAtA[i:], m.AssignedID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MethodCallRequest_Argument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodCallRequest_Argument) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExchange(dAtA, i, uint64(m.Type))
	}
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MethodCallRequest_Argument_StringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintExchange(dAtA, i, uint64(len(m.StringValue)))
	i += copy(dAtA[i:], m.StringValue)
	return i, nil
}
func (m *MethodCallRequest_Argument_IntValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintExchange(dAtA, i, uint64(m.IntValue))
	return i, nil
}
func (m *ImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImportedName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExchange(dAtA, i, uint64(len(m.ImportedName)))
		i += copy(dAtA[i:], m.ImportedName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReturnValue != nil {
		nn2, err := m.ReturnValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelResponse_ReturnValueString) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintExchange(dAtA, i, uint64(len(m.ReturnValueString)))
	i += copy(dAtA[i:], m.ReturnValueString)
	return i, nil
}
func (m *ChannelResponse_ReturnValueInt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintExchange(dAtA, i, uint64(m.ReturnValueInt))
	return i, nil
}
func (m *ChannelResponse_ExceptionMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExchange(dAtA, i, uint64(len(m.ExceptionMessage)))
	i += copy(dAtA[i:], m.ExceptionMessage)
	return i, nil
}
func (m *ChannelResponse_NoReturnValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.NoReturnValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func encodeVarintExchange(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MethodCallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.ObjectID)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if m.Static {
		n += 2
	}
	if m.DoGetReturnValue {
		n += 2
	}
	if m.Property {
		n += 2
	}
	l = len(m.AssignedID)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MethodCallRequest_Argument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovExchange(uint64(m.Type))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MethodCallRequest_Argument_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovExchange(uint64(l))
	return n
}
func (m *MethodCallRequest_Argument_IntValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExchange(uint64(m.IntValue))
	return n
}
func (m *ImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImportedName)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnValue != nil {
		n += m.ReturnValue.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelResponse_ReturnValueString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnValueString)
	n += 1 + l + sovExchange(uint64(l))
	return n
}
func (m *ChannelResponse_ReturnValueInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExchange(uint64(m.ReturnValueInt))
	return n
}
func (m *ChannelResponse_ExceptionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExceptionMessage)
	n += 1 + l + sovExchange(uint64(l))
	return n
}
func (m *ChannelResponse_NoReturnValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func sovExchange(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExchange(x uint64) (n int) {
	return sovExchange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MethodCallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MethodCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MethodCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &MethodCallRequest_Argument{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Static", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Static = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoGetReturnValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoGetReturnValue = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Property = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MethodCallRequest_Argument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Argument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Argument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MethodCallRequest_ArgumentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &MethodCallRequest_Argument_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &MethodCallRequest_Argument_IntValue{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImportedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnValue = &ChannelResponse_ReturnValueString{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnValueInt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnValue = &ChannelResponse_ReturnValueInt{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptionMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnValue = &ChannelResponse_ExceptionMessage{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReturnValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReturnValue = &ChannelResponse_NoReturnValue{b}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExchange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExchange
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExchange
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExchange(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExchange = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExchange   = fmt.Errorf("proto: integer overflow")
)
