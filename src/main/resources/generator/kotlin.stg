wrapperClass(libraryName, wrappedClasses) ::= <<
<imports()>

public class <libraryName>Kotlin {
    <wrapperFields([libraryName, "Kotlin"])>

    <entitiesMaker()>

    <entities(wrappedClasses)>
}
>>

imports() ::= <<
import ru.spbstu.kspt.librarylink.*;

import java.util.*;
>>

wrapperFields(className) ::= <<
private val exchange = LibraryLink.exchange;
>>

loggerField(className) ::= <<
private val logger = LoggerFactory.getLogger(<className>::class.java);
>>

entities(wrappedClasses) ::= <<
<wrappedClasses:entity(); separator="\n\n">
>>

entitiesMaker() ::= <<>>

doCall(methodObject) ::= <<
val peResponse = exchange.makeRequest(request);
<if(methodObject.returnValue)>
<if(methodObject.referenceReturn)>
<returnExprReference(methodObject)>
<else>
<returnExprPrimitive(methodObject)>
<endif>
<endif>
>>

returnExprReference(methodObject) ::= <<
return <methodObject.returnValue>(peResponse.assignedID);
>>

returnExprPrimitive(methodObject) ::= <<
return (<methodObject.returnValue>) peResponse.getReturnValue();
>>

requestObjectCreation(methodProperties, requestProperties) ::= <<
<bigList(methodProperties.args)>
val request = MethodCallRequest(methodName = "<requestProperties.methodName>",
                                objectID = <if(requestProperties.static)>"<requestProperties.objectID>"<else><requestProperties.objectID><endif>,
                                args = args,
                                isStatic = <requestProperties.static>,
                                doGetReturnValue = <requestProperties.doGetReturnValue>,
                                isProperty = <requestProperties.property>);
>>

bigList(args) ::= <<
val args = listOf\<Argument>(<args:argObject(); separator=", ">);
>>

argObject(arg) ::= <<
Argument(<arg.name>, "<arg.name>")
>>

args(argObject) ::= <<
<argObject.name>: <argObject.type>
>>

methodReturnValue(returnValue) ::= "<if(returnValue)>: <returnValue><endif>"

method(methodObject) ::= <<
public fun <methodObject.name>(<methodObject.args:args(); separator=", ">)<methodReturnValue(methodObject.returnValue)> {
    <requestObjectCreation(methodObject, methodObject.request)>
    <doCall(methodObject)>
}
>>

constructor(methodObject, className) ::= <<
constructor(<methodObject.args:args(); separator=", ">) {
    <requestObjectCreation(methodObject, methodObject.request)>
    val peResponse = exchange.makeRequest(request);
    assignedID = peResponse.assignedID;
}
>>

preinitConstructor(className) ::= <<
constructor(storedName: String) : super(storedName);
>>

entity(wrappedClass) ::= <<
class <wrappedClass.name> : Handle {
    <wrapperFields(wrappedClass.name)>
    <wrappedClass.constructor:constructor(wrappedClass.name); separator="\n\n">
    <preinitConstructor(wrappedClass.name)>
    <wrappedClass.methods:method(); separator="\n\n">
}
>>